import nashpy as nash
import numpy as np
from rl4co.tasks.train_psro import nash_solver

payoff = [[-8.320090293884277, -12.689987182617188, -12.695391654968262, -12.701642036437988, -12.695009231567383, -12.682223320007324, -12.712272644042969, -12.667594909667969, -12.68409538269043, -12.700541496276855, -12.676188468933105, -12.7167387008667, -12.695034980773926, -12.692957878112793, -12.705727577209473, -12.69692325592041, -12.710610389709473, -12.71569538116455, -12.696544647216797, -12.692241668701172],
 [-7.994160175323486, -8.006111145019531, -9.502106666564941, -9.500190734863281, -9.51962661743164, -9.514325141906738, -9.522193908691406, -9.519383430480957, -9.509622573852539, -9.518418312072754, -9.51563549041748, -9.520174980163574, -9.527793884277344, -9.50989818572998, -9.52144718170166, -9.523298263549805, -9.5114107131958, -9.537220001220703, -9.498624801635742, -9.529991149902344],
 [-8.013097763061523, -7.999499797821045, -8.012245178222656, -8.897163391113281, -8.897613525390625, -8.898375511169434, -8.895872116088867, -8.895808219909668, -8.90489387512207, -8.897294998168945, -8.873345375061035, -8.914751052856445, -8.91025161743164, -8.910599708557129, -8.887055397033691, -8.900625228881836, -8.878228187561035, -8.898554801940918, -8.885830879211426, -8.917430877685547],
 [-7.988176345825195, -7.959396839141846, -7.978890419006348, -7.977752685546875, -8.540179252624512, -8.564078330993652, -8.548629760742188, -8.510987281799316, -8.544463157653809, -8.533891677856445, -8.50295639038086, -8.539118766784668, -8.529006004333496, -8.5474271774292, -8.528301239013672, -8.5223970413208, -8.54458999633789, -8.531515121459961, -8.541997909545898, -8.530972480773926],
 [-7.961181163787842, -7.9604716300964355, -7.982603073120117, -7.97695779800415, -8.015201568603516, -8.487415313720703, -8.50129222869873, -8.503090858459473, -8.501407623291016, -8.492990493774414, -8.473626136779785, -8.497282981872559, -8.489794731140137, -8.48845100402832, -8.454887390136719, -8.478557586669922, -8.460265159606934, -8.505268096923828, -8.496808052062988, -8.481780052185059],
 [-7.977991104125977, -7.987455368041992, -7.992010593414307, -7.982856750488281, -7.966316223144531, -7.983522415161133, -8.276601791381836, -8.264812469482422, -8.272784233093262, -8.286267280578613, -8.277982711791992, -8.279528617858887, -8.258051872253418, -8.264127731323242, -8.24854564666748, -8.283350944519043, -8.266849517822266, -8.27429485321045, -8.287226676940918, -8.252741813659668],
 [-7.9879069328308105, -7.959132671356201, -7.964606285095215, -7.976451396942139, -7.999455451965332, -7.994167804718018, -7.967533588409424, -8.262911796569824, -8.269120216369629, -8.249789237976074, -8.266942977905273, -8.261201858520508, -8.233667373657227, -8.24538803100586, -8.254090309143066, -8.23530101776123, -8.246582984924316, -8.241414070129395, -8.232200622558594, -8.254849433898926],
 [-7.965141296386719, -8.0184326171875, -7.97538423538208, -7.982368469238281, -7.9941277503967285, -7.987741947174072, -7.987574577331543, -7.9860920906066895, -8.28376579284668, -8.290059089660645, -8.247576713562012, -8.258938789367676, -8.268682479858398, -8.239249229431152, -8.225764274597168, -8.253456115722656, -8.278420448303223, -8.289424896240234, -8.240799903869629, -8.28007984161377],
 [-7.959773063659668, -7.943971633911133, -7.950028896331787, -7.974767208099365, -7.9773077964782715, -7.963012218475342, -7.964759349822998, -7.966874599456787, -7.968631267547607, -8.158759117126465, -8.15049934387207, -8.178857803344727, -8.174436569213867, -8.164802551269531, -8.160082817077637, -8.17910099029541, -8.160421371459961, -8.184162139892578, -8.175115585327148, -8.157512664794922],
 [-7.964362144470215, -7.964415550231934, -7.974931716918945, -7.995975017547607, -7.977118492126465, -7.972416877746582, -7.961695194244385, -7.964303016662598, -7.971090316772461, -7.966948986053467, -8.203598976135254, -8.161290168762207, -8.178642272949219, -8.171732902526855, -8.194157600402832, -8.182981491088867, -8.1697998046875, -8.179328918457031, -8.167325019836426, -8.16479206085205],
 [-7.9684576988220215, -7.964933395385742, -7.964442729949951, -7.947619915008545, -7.977454662322998, -7.947295188903809, -7.930965423583984, -7.948187351226807, -7.947032451629639, -7.983895301818848, -7.956624984741211, -8.181678771972656, -8.19067668914795, -8.190285682678223, -8.174948692321777, -8.158965110778809, -8.183968544006348, -8.19003677368164, -8.180395126342773, -8.2103853225708],
 [-7.988533973693848, -7.963214874267578, -7.995433330535889, -7.959348201751709, -7.978740215301514, -7.982922554016113, -7.951990604400635, -7.946630954742432, -7.988893508911133, -7.955515384674072, -7.966362476348877, -7.9561333656311035, -8.094862937927246, -8.106435775756836, -8.091808319091797, -8.103789329528809, -8.111042976379395, -8.096783638000488, -8.113795280456543, -8.132059097290039],
 [-7.984339714050293, -7.959726333618164, -7.958739757537842, -7.956357479095459, -7.961770057678223, -7.950438976287842, -7.971092224121094, -7.967312335968018, -7.963151454925537, -7.963821887969971, -7.981876373291016, -7.9462738037109375, -7.952863693237305, -8.119894981384277, -8.12327766418457, -8.098356246948242, -8.091468811035156, -8.150218963623047, -8.091863632202148, -8.132521629333496],
 [-7.978442192077637, -7.96680212020874, -7.947874069213867, -7.95962381362915, -7.967756748199463, -7.946154594421387, -7.957685947418213, -7.955071449279785, -7.930675029754639, -7.958031177520752, -7.956526279449463, -7.9639387130737305, -7.9648637771606445, -7.944634914398193, -8.13215160369873, -8.129667282104492, -8.118242263793945, -8.101409912109375, -8.119568824768066, -8.105175018310547],
 [-7.952240467071533, -7.962248802185059, -7.951786518096924, -7.977832794189453, -7.934256076812744, -7.953823089599609, -7.970156192779541, -7.949943542480469, -7.953749656677246, -7.964937210083008, -7.941212177276611, -7.9689249992370605, -7.949495315551758, -7.944223403930664, -7.968315601348877, -8.084349632263184, -8.091015815734863, -8.07851505279541, -8.079984664916992, -8.091474533081055],
 [-7.962615966796875, -7.936586380004883, -7.969100475311279, -7.96172571182251, -7.92957878112793, -7.95809268951416, -7.967782497406006, -7.955237865447998, -7.956758975982666, -7.955043315887451, -7.965148448944092, -7.95383358001709, -7.944747447967529, -7.954343318939209, -7.93213415145874, -7.9514594078063965, -8.051261901855469, -8.042641639709473, -8.029035568237305, -8.050700187683105],
 [-7.958986282348633, -7.959167957305908, -7.9858622550964355, -7.955513954162598, -7.97895622253418, -7.981301307678223, -7.958169937133789, -7.983860015869141, -7.946988105773926, -7.941449165344238, -7.948124885559082, -7.94857931137085, -7.941017150878906, -7.944048881530762, -7.9831085205078125, -7.953131675720215, -7.957434177398682, -8.081067085266113, -8.100363731384277, -8.093681335449219],
 [-7.964003086090088, -7.945213794708252, -7.961033344268799, -7.953380107879639, -7.978479385375977, -7.9571685791015625, -7.968588829040527, -7.956242084503174, -7.967458248138428, -7.952484130859375, -7.967587947845459, -7.955966949462891, -7.979425430297852, -7.94090461730957, -7.942960739135742, -7.970362186431885, -7.961785793304443, -7.951265335083008, -8.084854125976562, -8.10780143737793],
 [-7.965823173522949, -7.938997268676758, -7.954305171966553, -7.937017917633057, -7.941293716430664, -7.944085597991943, -7.989253044128418, -7.944948196411133, -7.966879367828369, -7.966978073120117, -7.939620018005371, -7.974184036254883, -7.936493396759033, -7.960963726043701, -7.950371742248535, -7.946885585784912, -7.9370927810668945, -7.930933952331543, -7.951977729797363, -8.109017372131348],
 [-7.980214595794678, -7.963877201080322, -7.955965995788574, -7.944973945617676, -7.958383560180664, -7.938917636871338, -7.96191930770874, -7.93769645690918, -7.945637226104736, -7.9230780601501465, -7.95210599899292, -7.939462184906006, -7.9601545333862305, -7.96234655380249, -7.9484076499938965, -7.949823379516602, -7.970425605773926, -7.938714027404785, -7.9853715896606445, -7.9877800941467285]]
# eq = nash_solver(np.array(payoff))
# print(eq)

A = np.array([[0, -1, 1], [1, 0, -1], [-1, 2, 0]])      # 定义utility矩阵：i,j = player采取i，对手j
B = -A
game = nash.Game(A)   # 创建零和游戏

equilibria = game.lemke_howson_enumeration()
equilibrium = next(equilibria, None)

# Lemke-Howson couldn't find equilibrium OR
# Lemke-Howson return error - game may be degenerate. try other approaches
if equilibrium is None or (equilibrium[0].shape != (A.shape[0],) and equilibrium[1].shape != (A.shape[0],)):
    # try other
    print('\n\n\n\n\nuh oh! degenerate solution')
    print('payoffs are\n', A)
    equilibria = game.vertex_enumeration()
    equilibrium = next(equilibria)
    if equilibrium is None:
        print('\n\n\n\n\nuh oh x2! degenerate solution again!!')
        print('payoffs are\n', A)
        equilibria = game.support_enumeration()
        equilibrium = next(equilibria)

assert equilibrium is not None
print(equilibrium[0].tolist())

'''

# sigma_r = [0.3, 0.4, 0.4]     # row player的strategy， 代表总出3policy
# sigma_c = [0, 1, 0]
# print(rps[sigma_r, sigma_c])       # stategy输入游戏，返回每个player的收益

# 假设c player采用前两个策略随机：
# sigma_c = [1 / 2, 1 / 2, 0]     # 每个策略的概率值填入
# print(rps[sigma_r, sigma_c]) # 得到一个size=2向量，第一个值是主agent的值

# r player也改变策略：
# sigma_r = [0, 1 / 2, 1 / 2]
# print(rps[sigma_r, sigma_c]) 

# expected_utility = game[agent_eq, nature_eq]
# print('  expected_utility', expected_utility)
# 求解nash均衡
# eqs = rps.support_enumeration()
# print(list(eqs)) # 得到两个player的均衡策略

# nash均衡只出现在非合作博弈中
# 定义一个游戏，两个player不断play
# iterations = 100
# np.random.seed(0)
# play_counts = rps.fictitious_play(iterations=iterations)        # 知道各自unitlity的多次博弈，返回两个player采取策略的次数
# 查看policy能看到，两个player的policy次数趋于相近，这是该游戏下接近nash均衡
# for row_play_count, col_play_count in play_counts:
#     print(row_play_count, col_play_count)
    
# 求解nash均衡的解，可能不只有一个，所以返回迭代器。指定的参数initial_dropped_label为解的标号
# eq0 = rps.lemke_howson(initial_dropped_label=0)
# print(eq0)      # 返回两player的strategy

# equilibria = matching_pennies.lemke_howson_enumeration()
# for eq in equilibria:
    # print(eq)
    '''