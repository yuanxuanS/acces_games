# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - override /model: am.yaml
  - override /env: dpp.yaml
  - override /callbacks: default.yaml
  - override /trainer: default.yaml
  # - override /logger: null # comment this line to enable logging
  - override /logger: wandb.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

tags: ["dpp", "am"]

logger:
  wandb:
    project: "rl4co"
    tags: ${tags}
    group: "dpp"
    name: "am"
   
seed: 12345

env:
  val_file: "test.npz" # these are automatically loaded by the environment
  test_file: "test.npz"

trainer:
  min_epochs: 10
  max_epochs: 10
  gradient_clip_val: 1.0
  accelerator: "gpu"
  precision: "16-mixed" 
  # Fast distributed training: comment out to use on single GPU
  # devices: 1 # change number of devices

train:
  optimizer:
    # _partial_: True
    _target_: torch.optim.Adam
    # lr: 1e-4
    lr: 1e-4
    weight_decay: 1e-3

matmul_precision: "medium" #https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision

data:
  batch_size: 64 #512 #64
  train_size: 1000 # with 10 epochs, this is 10k samples
  val_size: 100

# Log metrics
metrics:
  train: ["loss", "reward"]
  val: ["reward"]
  test: ["reward"]
  log_cost: False

# Adjust monitoring
model_checkpoint:
  monitor: "val/reward"
  mode: "max"